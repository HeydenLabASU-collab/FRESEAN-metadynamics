#!/bin/bash

EXE="$(cd "$(dirname "${BASH_SOURCE:-$0}")"&& pwd)"
usage(){
	printf "__________________________________\n\
Welcome to FRESEAN V1.0!\n\
Please refer to README.md for an\nin-depth guide to FRESEAN V1.0.\n\
Quick Guide of Available Programs\n\
----------------------------------\n\n\
fresean freqs: Generate list of available frequencies given\n\
\t\tcorrelaiton function length.\n\n\
fresean mtop: Generate custom .mtop topology.\n\n\
fresean coarse: Generate spatially coarsened trajectory.\n\n\
fresean matrix: Generate frequency dependent cross-correlation\n\
\t\tmatrices.\n\nfresean eigen: Generate FRESEAN modes from velocity\n\
\t\tcross-correlation matrices.\n\n\
fresean extract: Extract vibrational modes from .mmat format\n\
\t\tinto .xyz format.\n\nfresean avg: Average over many velocity cross-correlation\n\t\tmatrices.\
\n\n-------------------------------------\nSubroutine info (input file format, usage, description)\n\
available with the command: fresean [subroutine_name] -h\n-------------------------------------\n\
-------------------------------------\nQuestions about repository should\
\nbe directed to: masauer2@asu.edu or mheyden1@asu.edu.\n-------------------------------------\n"
}

avg-matrix_printTitle(){ printf " -----------------------------------------------\n              fresean avg subroutine \n ------------------------------------------------\n\
THE PURPOSE OF THIS PROGRAM IS TO AVERAGE A SET OF\n\
BINARY FILES, EACH CONTAINING A LIST OF SQUARE MATRICES.\n\
THE FORMAT IS EXPECTED TO BE THE *.mmat FORMAT USED\n\
AS OUTPUT OF:\n\
gen-modes.exe OR gen-modes_omp.exe\n\
Version 1.0: April 27, 2023\n\
Author:\n\
Michael Sauer and Dr. Matthias Heyden\n\
School of Molecular Sciences\n\
Arizona State University\n\
Tempe, AZ, USA\n\
e-mail: masauer2@asu.edu/mheyden1@asu.edu\n\n" 1>&2; }

eigen_printTitle(){ printf " -----------------------------------------------\n             fresean eigen subroutine \n ------------------------------------------------\n\
THE PURPOSE OF THIS PROGRAM IS TO COMPUTE\n\
THE EIGENVALUES AND EIGENVECTORS FOR A LIST OF\nMATRICES GENERATED BY:\n\
gen-modes.exe OR gen-modes_omp.exe\n\
AN OPTIONAL PARAMETER ALLOWS TO PERFORM THIS\n\
FOR ONLY THE FIRST 'N' MATRICES IN THE LIST.\n\
Version 1.2: April 26, 2023\nAuthor:\n Dr. Matthias Heyden\n\
School of Molecular Sciences\n\
Arizona State University\n\
Tempe, AZ, USA\n e-mail: mheyden1@asu.edu\n\n" 1>&2; }

extract_printTitle(){ printf " -----------------------------------------------\n           fresean extract subroutine \n ------------------------------------------------\n\
THE PURPOSE OF THIS PROGRAM IS TO WRITE\n\
A SELECTED EIGVECTOR IN ASCII\nVersion 1.0: Sept. 22, 2021\n\
Author:\n\
Dr. Matthias Heyden\n\
School of Molecular Sciences\n\
Arizona State University\n\
Tempe, AZ, USA\n\
e-mail: mheyden1@asu.edu\n\n" 1>&2; }

gen_list_printTitle(){ printf " -----------------------------------------------\n             fresean freqs subroutine \n ------------------------------------------------\n\
THE PURPOSE OF THIS PROGRAM IS TO GENERATE \n\
A TWO_COLUMN FILE CONTAINING MATRIX INDECES \n\
AND MATRIX FREQUENCIES FOR A GIVEN TIMESTEP \n\
AND CORRELATION FUNCTION LENGTH. \n\
Author:\n\
Michael Sauer and Dr. Matthias Heyden\n\
School of Molecular Sciences\n\
Arizona State University\n\
Tempe, AZ, USA\n\
e-mail: masauer2@asu.edu/mheyden1@asu.edu\n\n" 1>&2; }

matrix_printTitle(){ printf " -----------------------------------------------\n           fresean matrix subroutine \n ------------------------------------------------\n\
THE PURPOSE OF THIS PROGRAM IS TO COMPUTE\n\
A CROSS-CORRELATION MATRIX OF WEIGHTED VELOCITIES\n\
FOR ADDITIONAL PROCESSING (BINARY OR ASCII FORMAT).\n\
THE ANALYSIS IS PERFORMED FOR A SELECTED GROUP OF\n\
ATOMS. THIS GROUP OF ATOMS SHOULD ALSO BE USED\n\
FOR TRANS/ROT FITTING. THIS OPERATION SHOULD BE\n\
PERFORMED BY THIS PROGRAM TO ENSURE THAT ALL\n\
ROTATIONS ARE ALSO APPLIED TO VELOCITIES!\n\
OPTIONALLY, THIS PROGRAM ALSO COMPUTES\n\
GENERALIZED NORMAL MODES TO DESCRIBE VIBRATIONS\n\
OF THE ATOMS IN THE SELECTED GROUP.\n\
IF YOU USE THIS OPTION, READ & CITE:\n\
G. Mathias & M. Baer\n\
J. Chem. Theory Comput. 2011, 7, 2028-2039.\n\n\
Version 1.1: May 3, 2022\nAuthor:\n\
Dr. Matthias Heyden\n\
School of Molecular Sciences\n\
Arizona State University\n\
Tempe, AZ, USA\n\
e-mail: mheyden1@asu.edu\n\n" 1>&2; }

mtop_printTitle(){ printf " -----------------------------------------------\n              fresean mtop subroutine \n ------------------------------------------------\n\
THE PURPOSE OF THIS PROGRAM IS TO WRITE A CUSTOM TOPOLOGY FILE (.MTOP)\nTHAT IS RECOGNIZED BY OTHER SUBROUTINES.\n" 1>&2; }

traj_coarse_printTitle(){ printf " -----------------------------------------------\n           fresean coarse subroutine \n ------------------------------------------------\n\
THE PURPOSE OF THIS PROGRAM IS TO GENERATE\n\
A COARSE-GRAINED REPRESENTATION OF AN\n\
ALL -ATOM TRAJECTORY.\n\
THE COARSE-GRAINED REPRESENTATION IS\n\
DEFINED AS TWO CENTER OF MASS BEADS FOR.\n\
EACH AMINO ACID (ONE BACKBONE/ONE SIDECHAIN).\n\
Version 1: November 1, 2023\n\
Author:\n\
Michael A. Sauer\n\
School of Molecular Sciences\n\
Arizona State University\n\
Tempe, AZ, USA\n\
e-mail: masauer2@asu.edu\n\
\n" 1>&2; }

avg-matrix_printKeys(){ printf " -----------------------------------------------\n              PROPER INPUT FORMAT\n ------------------------------------------------\n\
nFiles (number of files to average over)\n\
fnList (list of individual matrix files, newline delimited)\n\
fnOut (average matrix output file)\n" 1>&2; }

# See eigen usage - no input file needed

extract_printKeys(){ printf " -----------------------------------------------\n              PROPER INPUT FORMAT\n ------------------------------------------------\n\
fnEigVec (Eigenvector .xyz file generated by bin/eigen or fresean eigen)\n\
extractMode ( Mode 0 -> freqSel is in wavenumbers; Mode 1 -> freqSel is matrix index )\n \
freqSel (Index of selected frequency, indeces generated by gen_list or fresean freqs)\n\
Trajectory Timestep\n\
modeStart (first mode number to extract)\n\
modeEnd (last mode number to extract)\n\
fnOut (output .xyz filename)\n" 1>&2; }

# See gen_list usage - no input file needed

matrix_printKeys(){ printf " -----------------------------------------------\n              PROPER INPUT FORMAT\n ------------------------------------------------\n\
fnTop (topology file [.mtop])\n\
fnCrd\n\
fnVel (if format xyz,crd,dcd)\n\
fnJob (atom group file [.job])\n\
nRead (Number of frames to read)\n\
analysisInterval (dFrame)\n\
fnRef (reference coordinate file)\n\
alignGrp (atom group to align trajectory to, from job file)\n\
analyzeGrp (atom group to perform analysis on, from job file)\n\
wrap (atom group to wrap trajectory on, from job file)\n\
nCorr (number of points in time correlation function)\n\
winSigma (width of smoothing funciton)\n\
binaryMatrix (0 for human readable, 1 for binary matrix)\n\
doGenModes (0 for no, 1 for yes)\n\
convergence (convergence value for generalized normal modes)\n\
maxIter (maximum iterations for generalized normal modes)\n\
fnOut (output matrix file)\n"1>&2; }

# See mtop usage - no input file needed

traj_coarse_printKeys(){ printf " -----------------------------------------------\n              PROPER INPUT FORMAT\n ------------------------------------------------\n\
fnTop (topology file [.mtop]) \n\
fnCrd\n\
fnVel (if format xyz,crd,dcd)\n\
fnJob (provided [.job] file)\n\
analyzeGrp (atom group in job file to perform analysis on)\n\
nRead (Number of frames to read)\n\
nSample (dFrame)\n\
fnOutTraj (Output coarse-grain trajectory [.gro])\n\
fnOutTopol (Output coarse-grain topology [.mtop])\n" 1>&2; }

avg-matrix_usage() { printf " -----------------------------------------------\n                  PROPER USAGE\n ------------------------------------------------\n\
Usage: fresean avg [-f <input_file.inp>]\nNote: The -f flag must specify a file in .inp format.\n\n" 1>&2; }
eigen_usage() { printf " -----------------------------------------------\n                  PROPER USAGE\n ------------------------------------------------\n\
Usage: fresean eigen [-m <matrix_file.mmat>] [-n <num_corr_points>]\nNote: -m must specify a matrix file in .mmat format.\n      -n must be an integer indicating the number of correlation points.\n\n" 1>&2; }
extract_usage() { printf " -----------------------------------------------\n                  PROPER USAGE\n ------------------------------------------------\n\
Usage: fresean extract [-f <input_file.inp>]\nNote: -f must specify a file in .inp format.\n\n" 1>&2;}
gen_list_usage() { printf " -----------------------------------------------\n                  PROPER USAGE\n ------------------------------------------------\n\
Usage: fresean freqs [-n <num_corr_points>] [-t <timestep_ps>] [-o <output_file>]\nNote: -n must be an integer specifying the number of points in the correlation function.\n      -t must be a float representing the timestep in picoseconds.\n      -o must be a writable output file that will contain frequencies and indices.\n\n" 1>&2;}
matrix_usage() { printf " -----------------------------------------------\n                  PROPER USAGE\n ------------------------------------------------\n\
Usage: fresean matrix [-f <input_file.inp>]\nNote: -f must specify a file in .inp format.\n\n" 1>&2; }
mtop_usage() { printf " -----------------------------------------------\n                  PROPER USAGE\n ------------------------------------------------\n\
Usage: fresean mtop [-p <topology_file.top>]\nNote: -p must specify a .top file generated by GROMACS.\n\n" 1>&2; }
traj_coarse_usage() { printf " -----------------------------------------------\n                  PROPER USAGE\n ------------------------------------------------\n\
Usage: fresean coarse [-f <input_file.inp>]\nNote: -f must specify a file in .inp format.\n\n" 1>&2; }

avg_subcommand() {
	local OPTIND
	local f=""
	programname="$EXE/avgBinMatrixList"

	while getopts "f:h" opt; do
		case $opt in
			f) f=${OPTARG} ;;
			h)
				avg-matrix_printTitle
				avg-matrix_usage
				avg-matrix_printKeys
				exit 0
				;;
			\?)
			    printf " -----------------------------------------------\n             UNRECOGNIZED USAGE FLAG\n ------------------------------------------------\n"
				avg-matrix_printTitle
				avg-matrix_usage
				avg-matrix_printKeys
				exit 1
				;;
		esac
	done

	if [ $# -eq 0 ]; then
		avg-matrix_printTitle
		avg-matrix_usage
		avg-matrix_printKeys
		exit 1
	fi

	# Check if the file exists and ends in .inp
	if [[ -z "$f" || ! -f "$f" || "$f" != *.inp ]]; then
		printf " -----------------------------------------------\n   MISSING INPUT FILE OR INCORRECT FILE FORMAT\n ------------------------------------------------\n"
		avg-matrix_usage
		avg-matrix_printKeys
		exit 1
	fi

	# Call the backend program
	"$programname" "$f"
}

eigen_subcommand(){
	local OPTIND
	programname=$EXE/eigen
	while getopts "m:n:h:" opt
	do
		case $opt in
			m) m=${OPTARG};;
			n) n=${OPTARG};;
			h)
				eigen_printTitle
				eigen_usage
				exit 0
				;;
			\?)
			    printf " -----------------------------------------------\n             UNRECOGNIZED USAGE FLAG\n ------------------------------------------------\n"
				eigen_printTitle
				eigen_usage
				exit 1
				;;
		esac
	done

	if [ $# -eq 0 ]; then
		eigen_printTitle
		eigen_usage
		exit 1
	fi

	# Check if the file exists and ends in .inp
	if [[ -z "$m" || -z "$n" ]]; then
		printf " -----------------------------------------------\n   MISSING INPUT PARAMETER \n ------------------------------------------------\n"
		eigen_printTitle
		eigen_usage
		exit 1
	fi

	if [ ! -f "$m" || "$m" != *.mmat ]; then
    	printf " -----------------------------------------------\n   -m flag must be an eigenvector file [.mmat] \n ------------------------------------------------\n"
		eigen_usage
		exit 1
	fi

	if [[ "$n" -le 0 ]];then
		printf " -----------------------------------------------\n   -n flag must be a positive integer \n ------------------------------------------------\n"
		eigen_usage
		exit 1
	fi
	
	$programname ${m} ${n}
}


extract_subcommand(){
	local OPTIND
	programname=$EXE/extract
	while getopts "f:h:" opt
	do
		case $opt in
			f) f=${OPTARG};;
			h)
				extract_printTitle
				extract_usage
				extract_printKeys
				exit 0
				;;
			\?)
			    printf " -----------------------------------------------\n             UNRECOGNIZED USAGE FLAG\n ------------------------------------------------\n"
				extract_printTitle
				extract_usage
				extract_printKeys
				exit 1
				;;
		esac
	done

	if [ $# -eq 0 ]; then
		extract_printTitle
		extract_usage
		extract_printKeys
		exit 1
	fi

	# Check if the file exists and ends in .inp
	if [[ -z "$f" || ! -f "$f" || "$f" != *.inp ]]; then
		printf " -----------------------------------------------\n   MISSING INPUT FILE OR INCORRECT FILE FORMAT\n ------------------------------------------------\n"
		extract_usage
		extract_printKeys
		exit 1
	fi

	$programname ${f}
}


gen_list_subcommand(){
	local OPTIND
	programname=$EXE/gen_list
	while getopts "n:t:o:h:" opt     
	do
		case $opt in
			n) n=${OPTARG};;
			t) t=${OPTARG};;
			o) o=${OPTARG};;	
			h)
				gen_list_printTitle
				gen_list_usage
				gen_list_printKeys
				exit 0
				;;
			\?)
			    printf " -----------------------------------------------\n             UNRECOGNIZED USAGE FLAG\n ------------------------------------------------\n"
				gen_list_printTitle
				gen_list_usage
				gen_list_printKeys
				exit 1
				;;
		esac
	done
	if [ -z "$n" ] || [ -z "$t" ] || [ -z "$o" ]; then
		printf " -----------------------------------------------\n   MISSING INPUT PARAMETER \n ------------------------------------------------\n"
		gen_list_printTitle
		gen_list_usage
		gen_list_printKeys
		exit 1
	fi
	if [[ "$n" -le 0 ]];then
		printf " -----------------------------------------------\n   -n flag must be a positive integer \n ------------------------------------------------\n"
		exit 1
	fi
	if [[ "$t" -le 0 ]];then
		printf " -----------------------------------------------\n -t flag must be a positive timestep, in picoseconds \n ------------------------------------------------\n"
		exit 1
	fi
	$programname ${n} ${t} ${o}
}

mtop_subcommand(){
	local OPTIND
	programname=$EXE/convertGMXTOP
	while getopts "h" opt
	do
		case $opt in 
		h)
				mtop_printTitle
				mtop_usage
				exit 1
				;;
		esac
	done
	$programname
}

coarse_subcommand(){
	local OPTIND
	programname=$EXE/traj_coarse
	while getopts "f:h" opt
	do
		case $opt in
			f) f=${OPTARG};;
			h)
				traj_coarse_printTitle
				traj_coarse_usage
				traj_coarse_printKeys
				exit 0
				;;
			\?)
			    printf " -----------------------------------------------\n             UNRECOGNIZED USAGE FLAG\n ------------------------------------------------\n"
				traj_coarse_printTitle
				traj_coarse_usage
				traj_coarse_printKeys
				exit 1
				;;
		esac
	done
	if [ $# -eq 0 ]; then
		traj_coarse_printTitle
		traj_coarse_usage
		traj_coarse_printKeys
		exit 1
	fi

	# Check if the file exists and ends in .inp
	if [[ -z "$f" || ! -f "$f" || "$f" != *.inp ]]; then
		printf " -----------------------------------------------\n   MISSING INPUT FILE OR INCORRECT FILE FORMAT\n ------------------------------------------------\n"
		traj_coarse_usage
		traj_coarse_printKeys
		exit 1
	fi


	$programname ${f}
}


matrix_subcommand(){
	local OPTIND
	programname=$EXE/gen-modes_omp
	while getopts "f:h" opt
	do
		case $opt in
			f) f=${OPTARG};;
			h)
				matrix_printTitle
				matrix_usage
				matrix_printKeys
				exit 0
				;;
			\?)
			    printf " -----------------------------------------------\n             UNRECOGNIZED USAGE FLAG\n ------------------------------------------------\n"
				matrix_printTitle
				matrix_usage
				matrix_printKeys
				exit 1
				;;
		esac
	done
	
	if [ $# -eq 0 ]; then
		matrix_printTitle
		matrix_usage
		matrix_printKeys
		exit 1
	fi

	# Check if the file exists and ends in .inp
	if [[ -z "$f" || ! -f "$f" || "$f" != *.inp ]]; then
		printf " -----------------------------------------------\n   MISSING INPUT FILE OR INCORRECT FILE FORMAT\n ------------------------------------------------\n"
		matrix_usage
		matrix_printKeys
		exit 1
	fi

	$programname ${f}
}



case "$1" in
	freqs)
		gen_list_subcommand "${@:2}";;
	extract)
		extract_subcommand "${@:2}";;
	mtop)
		mtop_subcommand "${@:2}";;
	coarse)
		coarse_subcommand "${@:2}";;
	matrix)
		matrix_subcommand "${@:2}";;
	eigen)
		eigen_subcommand "${@:2}";;
	avg)
		avg_subcommand "${@:2}";;
	-h)
printf " 
____________________________________________________________________\n\
Welcome to FRESEAN V1.0!\n\
Please refer to README.md for an in-depth guide to FRESEAN V1.0.\n\n\
Below is guidance on how to construct input files [.inp] and job files [.job] \n\
required by fresean subcommands.\n\
--------------------------------------------------------------------\n

Below is guidance on how to construct input files [.inp] and job files [.job] \n\
required by fresean subcommands. \n\
----------------------------------------------------------------------------------------------\n\
----------------------------------------------------------------------------------------------\n\
                               INPUT FILE [.inp] FORMAT:\n\
----------------------------------------------------------------------------------------------\n\
----------------------------------------------------------------------------------------------\n\
A plain text file where inputs are provided in a newline-delimited format in a fixed order.\n\
The correct parameter order can be found by running the FRESEAN subcommand with the -h flag.\n\
An example input file for FRESEAN COARSE is shown below:\n\
\n\
Lines starting with \"#\" are header lines and are ignored by the subcommand.\n\n\
example [.inp] file below\n\
-----------------------------------------------\n\
#fnTop (topology file [.mtop])\n\
example_topology.top\n\
#fnCrd\n\
example_trajectory.trr\n\
#fnVel (if format is xyz, crd, or dcd)\n\
#fnJob (provided [.job] file)\n\
static.job\n\
#analyzeGrp (atom group in job file to perform analysis on)\n\
0\n\
#nRead (number of frames to read)\n\
5000\n\
#analysisInterval (dFrame)\n\
1\n\
#fnOutTraj (output coarse-grain trajectory [.gro])\n\
output_trajectory.gro\n\
#fnOutTopol (output coarse-grain topology [.mtop])\noutput_topology.mtop\n-----------------------------------------------\n\n\
----------------------------------------------------------------------------------------------\n\
----------------------------------------------------------------------------------------------\n\
                               JOB FILE [.job] FORMAT:\n\
----------------------------------------------------------------------------------------------\n\
----------------------------------------------------------------------------------------------\n\

A plain text file where atom groups are provided.\n\
An example job file defining one atom group containing all atoms is shown below:\n\
Modify group ranges to create new atom groups.\n\n\
example [.job] file below\n\
-----------------------------------------------\n\
#This is a job file describin\n\
#exclusively static groups.\n\
#\
[static_groups]         1\n\
# static group 0\n\
name                    all\n\
chain(s)                *\n\
residue(s)              *\n\
atom(s)                 *\n\
residue_number(s)       *\n\
residue_range           *\n\
atom_number(s)          *\n\
atom_range              *\n\
#\n\
[dynamic_groups]        0\n\
[combination_groups]    0\n-----------------------------------------------\
 \n\n";;
		
	*) 
		usage;;
esac
